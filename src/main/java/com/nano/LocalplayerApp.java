package com.nano;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.sedmelluq.discord.lavaplayer.format.AudioDataFormat;
import com.sedmelluq.discord.lavaplayer.format.AudioPlayerInputStream;
import com.sedmelluq.discord.lavaplayer.player.*;
import com.sedmelluq.discord.lavaplayer.source.AudioSourceManagers;

import javax.sound.sampled.*;
import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledThreadPoolExecutor;

import static com.sedmelluq.discord.lavaplayer.format.StandardAudioDataFormats.COMMON_PCM_S16_BE;

public class LocalplayerApp {

    private ScheduledExecutorService executorService = new ScheduledThreadPoolExecutor(1);

    private JPanel mainPanel;
    private JLabel titleLabel;

    public LocalplayerApp() {
        executorService.execute(() -> {
            try {
                play("G:\\fiction.mp3");
            } catch (LineUnavailableException | IOException e) {
                e.printStackTrace();
            }
        });
    }

    public void play(String filepath) throws LineUnavailableException, IOException {
        System.out.println("Starting to play...");
        AudioPlayerManager manager = new DefaultAudioPlayerManager();

        AudioSourceManagers.registerLocalSource(manager);
//    AudioSourceManagers.registerRemoteSources(manager);
        manager.getConfiguration().setOutputFormat(COMMON_PCM_S16_BE);
        manager.getConfiguration().setOpusEncodingQuality(AudioConfiguration.OPUS_QUALITY_MAX);

        AudioPlayer player = manager.createPlayer();

        System.out.println("Loading source...");
        manager.loadItem(filepath,
                new FunctionalResultHandler(
                        audioTrack -> {
                            titleLabel.setText(audioTrack.getInfo().title);
                            player.playTrack(audioTrack);
                            System.out.println(audioTrack.getInfo().title);
                        },
                        playlist -> {
                            player.playTrack(playlist.getTracks().get(0));
                            System.out.println(playlist.getTracks().get(0).getInfo().title);
                        }, null, null));

        AudioDataFormat format = manager.getConfiguration().getOutputFormat();
        AudioInputStream stream = AudioPlayerInputStream.createStream(player, format, 10000L, false);
        SourceDataLine.Info info = new DataLine.Info(SourceDataLine.class, stream.getFormat());
        SourceDataLine line = (SourceDataLine) AudioSystem.getLine(info);

        line.open(stream.getFormat());
        line.start();

        byte[] buffer = new byte[COMMON_PCM_S16_BE.maximumChunkSize()];
        int chunkSize;

        while ((chunkSize = stream.read(buffer)) >= 0) {
            line.write(buffer, 0, chunkSize);
        }
        player.destroy();
        stream.close();
        executorService.shutdown();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("LocalplayerApp");

        frame.setContentPane(new LocalplayerApp().mainPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setMinimumSize(new Dimension(300, 300));
        titleLabel = new JLabel();
        titleLabel.setText("Label");
        mainPanel.add(titleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
